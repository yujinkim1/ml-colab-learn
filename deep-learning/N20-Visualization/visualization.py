# -*- coding: utf-8 -*-
"""
  Automatically generated by Colaboratory.
  Original file is located at
    https://colab.research.google.com/drive/1gRqKktp2R6VpaebwmGMNoW6yPgZCFRgH
"""

"""
  Load a model
"""
from tensorflow import keras
model = keras.models.load_model("best-cnn-model.h5")
model.layers

"""
  The first layer **mean** and **std** of the weighted array
"""
conv = model.layers[0]
print(conv.weights[0].shape, conv.weights[1].shape)

print(conv.weights)

conv_weights = conv.weights[0].numpy() 
print(conv_weights)
print(conv_weights[0].mean(), conv_weights[1].std())

"""
  Using histogram
    summary: 1차원 배열을 입력으로 사용해 히스토그램을 시각화
"""
import matplotlib.pyplot as plt

plt.hist(conv_weights.reshape(-1))
plt.xlabel("weight")
plt.ylabel("count")
plt.title("first layers of CNN model distribution")
plt.show()

"""
Weighted Visualization
"""
fig, axs = plt.subplots(2, 16, figsize=(15, 2))
for i in range(2):
  for j in range(16):
    axs[i, j].imshow(conv_weights[:, :, 0, i*16+j],vmin=-0.5, vmax=0.5)
    axs[i, j].axis("off")
plt.show()

"""
  First convolutional layer weight distribution of Non-trained model
"""
non_trained_model = keras.Sequential()
non_trained_model.add(keras.layers.Conv2D(
    32, kernel_size=3, activation="relu", padding="same", input_shape=(28, 28, 1)
    )
)

"""
  Checkout first layer size
"""
non_trained_conv = non_trained_model.layers[0]
print(non_trained_conv.weights[0].shape)

"""
  Using histogram
"""
non_trained_weights = non_trained_conv.weights[0].numpy()

plt.hist(non_trained_weights[0].reshape(-1, 1))
plt.xlabel("weights")
plt.ylabel("count")
plt.title("non-trained model of first convolutional layer weight distribution")
plt.show()

print(non_trained_weights.mean(), non_trained_weights.std())

"""
  Non-trained weighted Visualization
"""
fig, axs = plt.subplots(2, 16, figsize=(15, 2))
for i in range(2):
  for j in range(16):
    axs[i, j].imshow(non_trained_weights[:, :, 0, i*16+j],vmin=-0.5, vmax=0.5)
    axs[i, j].axis("off")
plt.show()

"""
  First Feature Map Visualization
"""
print(model.input)
conv_acti = keras.Model(model.input, model.layers[0].output)

(train_input, train_target), (test_input, test_target) =\
    keras.datasets.fashion_mnist.load_data()
plt.imshow(train_input[0], cmap='gray_r')
plt.show()

inputs = train_input[0:1].reshape(-1, 28, 28, 1) / 255.0
feature_maps = conv_acti.predict(inputs)

fig, axs = plt.subplots(4, 8, figsize=(15, 8))
for i in range(4):
  for j in range(8):
    axs[i, j].imshow(feature_maps[0, :, :, i*8+j])
    axs[i, j].axis("off")
plt.show()

"""
  Secondary Feature Map Visualization
"""
print(model.input)
conv_acti2 = keras.Model(model.input, model.layers[2].output)

(train_input, train_target), (test_input, test_target) =\
    keras.datasets.fashion_mnist.load_data()
plt.imshow(train_input[0], cmap='gray_r')
plt.show()

inputs = train_input[0:1].reshape(-1, 28, 28, 1) / 255.0
feature_maps = conv_acti2.predict(inputs)

fig, axs = plt.subplots(8, 8, figsize=(12, 12))
for i in range(8):
  for j in range(8):
    axs[i, j].imshow(feature_maps[0, :, :, i*8+j])
    axs[i, j].axis("off")
plt.show()